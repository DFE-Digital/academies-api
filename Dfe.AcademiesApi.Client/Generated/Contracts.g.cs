//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace Dfe.AcademiesApi.Client.Contracts
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IEstablishmentsV1Client
    {
        /// <summary>
        /// Retrieves an establishment by its UK Provider Reference Number (UKPRN).
        /// </summary>
        /// <param name="ukprn">The UK Provider Reference Number (UKPRN) of the establishment.</param>
        /// <returns>Successfully found and returned the establishment.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EstablishmentResponse> GetByUkprnAsync(string ukprn);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves an establishment by its UK Provider Reference Number (UKPRN).
        /// </summary>
        /// <param name="ukprn">The UK Provider Reference Number (UKPRN) of the establishment.</param>
        /// <returns>Successfully found and returned the establishment.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EstablishmentResponse> GetByUkprnAsync(string ukprn, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves a list of establishment Unique Reference Numbers (URNs) by region.
        /// </summary>
        /// <param name="regions">Array of regions.</param>
        /// <returns>Successfully found and returned the establishment Unique Reference Numbers (URNs).</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<int>> GetURNsByRegionAsync(System.Collections.Generic.IEnumerable<string> regions);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a list of establishment Unique Reference Numbers (URNs) by region.
        /// </summary>
        /// <param name="regions">Array of regions.</param>
        /// <returns>Successfully found and returned the establishment Unique Reference Numbers (URNs).</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<int>> GetURNsByRegionAsync(System.Collections.Generic.IEnumerable<string> regions, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves an establishment by its Unique Reference Number (URN).
        /// </summary>
        /// <param name="urn">The Unique Reference Number (URN) of the establishment.</param>
        /// <returns>Successfully found and returned the establishment.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EstablishmentResponse> GetByUrnAsync(int urn);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves an establishment by its Unique Reference Number (URN).
        /// </summary>
        /// <param name="urn">The Unique Reference Number (URN) of the establishment.</param>
        /// <returns>Successfully found and returned the establishment.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EstablishmentResponse> GetByUrnAsync(int urn, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Searches for establishments based on a query.
        /// </summary>
        /// <returns>Successfully executed the search and returned establishments.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<EstablishmentSummaryResponse>> SearchEstablishmentsAsync(int? urn, string ukprn, string name);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Searches for establishments based on a query.
        /// </summary>
        /// <returns>Successfully executed the search and returned establishments.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<EstablishmentSummaryResponse>> SearchEstablishmentsAsync(int? urn, string ukprn, string name, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves a list of establishments by their Unique Reference Numbers (URNs).
        /// </summary>
        /// <returns>Successfully found and returned the establishments.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<EstablishmentResponse>> GetByUrnsAsync(System.Collections.Generic.IEnumerable<int> urn);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a list of establishments by their Unique Reference Numbers (URNs).
        /// </summary>
        /// <returns>Successfully found and returned the establishments.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<EstablishmentResponse>> GetByUrnsAsync(System.Collections.Generic.IEnumerable<int> urn, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IKeyStagePerformanceV1Client
    {
        /// <summary>
        /// Retrieves educational performance data for an establishment by its Unique Reference Number (URN).
        /// </summary>
        /// <param name="urn">The Unique Reference Number (URN) identifier of the establishment.</param>
        /// <returns>Successfully found and returned the educational performance data.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EducationalPerformanceResponse> GetEducationPerformanceByUrnAsync(string urn);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves educational performance data for an establishment by its Unique Reference Number (URN).
        /// </summary>
        /// <param name="urn">The Unique Reference Number (URN) identifier of the establishment.</param>
        /// <returns>Successfully found and returned the educational performance data.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EducationalPerformanceResponse> GetEducationPerformanceByUrnAsync(string urn, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITrustsV1Client
    {
        /// <summary>
        /// Retrieves a Trust by its UK Provider Reference Number (UKPRN).
        /// </summary>
        /// <param name="ukprn">The UK Provider Reference Number (UKPRN) identifier.</param>
        /// <returns>Successfully found and returned the Trust.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TrustResponse> GetTrustByUkprnAsync(string ukprn);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a Trust by its UK Provider Reference Number (UKPRN).
        /// </summary>
        /// <param name="ukprn">The UK Provider Reference Number (UKPRN) identifier.</param>
        /// <returns>Successfully found and returned the Trust.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TrustResponse> GetTrustByUkprnAsync(string ukprn, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Searches for Trusts based on query parameters.
        /// </summary>
        /// <param name="groupName">Name of the group.</param>
        /// <param name="ukPrn">UK Provider Reference Number (UKPRN) identifier.</param>
        /// <param name="companiesHouseNumber">Companies House Number.</param>
        /// <param name="page">Pagination page.</param>
        /// <param name="count">Number of results per page.</param>
        /// <returns>Successfully executed the search and returned Trusts.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TrustSummaryResponse>> SearchTrustsAllAsync(string groupName, string ukPrn, string companiesHouseNumber, int? page, int? count);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Searches for Trusts based on query parameters.
        /// </summary>
        /// <param name="groupName">Name of the group.</param>
        /// <param name="ukPrn">UK Provider Reference Number (UKPRN) identifier.</param>
        /// <param name="companiesHouseNumber">Companies House Number.</param>
        /// <param name="page">Pagination page.</param>
        /// <param name="count">Number of results per page.</param>
        /// <returns>Successfully executed the search and returned Trusts.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TrustSummaryResponse>> SearchTrustsAllAsync(string groupName, string ukPrn, string companiesHouseNumber, int? page, int? count, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IBaselineTrackerV2Client
    {
        /// <summary>
        /// Retrieves a paginated list of baseline trackers.
        /// </summary>
        /// <param name="states">Comma-separated list of states to filter by.</param>
        /// <param name="page">The page number to return.</param>
        /// <param name="count">The number of items per page.</param>
        /// <returns>Successfully found and returned the list of baseline trackers.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponseV2OfBaselineTrackerResponse> GetAsync(string states, int? page, int? count);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a paginated list of baseline trackers.
        /// </summary>
        /// <param name="states">Comma-separated list of states to filter by.</param>
        /// <param name="page">The page number to return.</param>
        /// <param name="count">The number of items per page.</param>
        /// <returns>Successfully found and returned the list of baseline trackers.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponseV2OfBaselineTrackerResponse> GetAsync(string states, int? page, int? count, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IFssProjectV2Client
    {
        /// <returns>Successfully found and returned the list of Fss Projects.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponseV2OfFssProjectResponse> GetAllAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Successfully found and returned the list of Fss Projects.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponseV2OfFssProjectResponse> GetAllAsync(System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITrustsV2Client
    {
        /// <summary>
        /// Searches for trusts based on given criteria.
        /// </summary>
        /// <remarks>
        /// Search can be performed using the groupName, UK Provider Reference Number (UKPRN), and companiesHouseNumber parameters.
        /// </remarks>
        /// <returns>Successfully found and returned the list of trusts.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponseV2OfTrustSummaryResponse> SearchTrustsAsync(string groupName, string ukPrn, string companiesHouseNumber, int? page, int? count, bool? includeEstablishments);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Searches for trusts based on given criteria.
        /// </summary>
        /// <remarks>
        /// Search can be performed using the groupName, UK Provider Reference Number (UKPRN), and companiesHouseNumber parameters.
        /// </remarks>
        /// <returns>Successfully found and returned the list of trusts.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponseV2OfTrustSummaryResponse> SearchTrustsAsync(string groupName, string ukPrn, string companiesHouseNumber, int? page, int? count, bool? includeEstablishments, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves a specific trust by UK Provider Reference Number (UKPRN).
        /// </summary>
        /// <returns>Successfully retrieved the trust.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiSingleResponseV2OfTrustResponse> GetTrustByUkPrnAsync(string ukprn);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a specific trust by UK Provider Reference Number (UKPRN).
        /// </summary>
        /// <returns>Successfully retrieved the trust.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiSingleResponseV2OfTrustResponse> GetTrustByUkPrnAsync(string ukprn, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves multiple trusts by their UK Provider Reference Numbers (UKPRNs).
        /// </summary>
        /// <returns>Successfully retrieved the trusts.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponseV2OfTrustResponse> GetByUkprnsAsync(System.Collections.Generic.IEnumerable<string> ukprn, bool? establishments);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves multiple trusts by their UK Provider Reference Numbers (UKPRNs).
        /// </summary>
        /// <returns>Successfully retrieved the trusts.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponseV2OfTrustResponse> GetByUkprnsAsync(System.Collections.Generic.IEnumerable<string> ukprn, bool? establishments, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITrustsV3Client
    {
        /// <summary>
        /// Searches for trusts based on given criteria.
        /// </summary>
        /// <remarks>
        /// Search can be performed using the groupName, ukPrn, and companiesHouseNumber parameters.
        /// </remarks>
        /// <returns>Successfully found and returned the list of trusts.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponseV2OfTrustSummaryResponse> SearchTrusts2Async(string groupName, string ukPrn, string companiesHouseNumber, int? page, int? count, bool? includeEstablishments);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Searches for trusts based on given criteria.
        /// </summary>
        /// <remarks>
        /// Search can be performed using the groupName, ukPrn, and companiesHouseNumber parameters.
        /// </remarks>
        /// <returns>Successfully found and returned the list of trusts.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResponseV2OfTrustSummaryResponse> SearchTrusts2Async(string groupName, string ukPrn, string companiesHouseNumber, int? page, int? count, bool? includeEstablishments, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves a specific trust by UKPRN.
        /// </summary>
        /// <returns>Successfully retrieved the trust.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiSingleResponseV2OfMasterTrustResponse> GetTrustByUkPrn2Async(string ukprn);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a specific trust by UKPRN.
        /// </summary>
        /// <returns>Successfully retrieved the trust.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiSingleResponseV2OfMasterTrustResponse> GetTrustByUkPrn2Async(string ukprn, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IEstablishmentsV4Client
    {
        /// <summary>
        /// Retrieves a Establishment by its UK Provider Reference Number (UKPRN).
        /// </summary>
        /// <param name="ukprn">The UK Provider Reference Number (UKPRN) identifier.</param>
        /// <returns>Successfully found and returned the Establishment.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EstablishmentDto> GetEstablishmentByUkprnAsync(string ukprn);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a Establishment by its UK Provider Reference Number (UKPRN).
        /// </summary>
        /// <param name="ukprn">The UK Provider Reference Number (UKPRN) identifier.</param>
        /// <returns>Successfully found and returned the Establishment.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EstablishmentDto> GetEstablishmentByUkprnAsync(string ukprn, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves an establishment by its Unique Reference Number (URN).
        /// </summary>
        /// <param name="urn">The Unique Reference Number (URN) of the establishment.</param>
        /// <returns>Successfully found and returned the establishment.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EstablishmentDto> GetEstablishmentByUrnAsync(string urn);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves an establishment by its Unique Reference Number (URN).
        /// </summary>
        /// <param name="urn">The Unique Reference Number (URN) of the establishment.</param>
        /// <returns>Successfully found and returned the establishment.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EstablishmentDto> GetEstablishmentByUrnAsync(string urn, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Searches for Establishments based on query parameters.
        /// </summary>
        /// <param name="name">Name of the establishment.</param>
        /// <param name="ukPrn">UK Provider Reference Number (UKPRN) identifier.</param>
        /// <param name="urn">Unique Reference Numbers (URN).</param>
        /// <returns>Successfully executed the search and returned Establishments.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<EstablishmentDto>> SearchEstablishments2Async(string name, string ukPrn, string urn);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Searches for Establishments based on query parameters.
        /// </summary>
        /// <param name="name">Name of the establishment.</param>
        /// <param name="ukPrn">UK Provider Reference Number (UKPRN) identifier.</param>
        /// <param name="urn">Unique Reference Numbers (URN).</param>
        /// <returns>Successfully executed the search and returned Establishments.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<EstablishmentDto>> SearchEstablishments2Async(string name, string ukPrn, string urn, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves a list of establishment Unique Reference Numbers (URNs) by region.
        /// </summary>
        /// <param name="regions">Array of regions.</param>
        /// <returns>Successfully found and returned the establishment Unique Reference Numbers (URNs).</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<int>> GetURNsByRegion2Async(System.Collections.Generic.IEnumerable<string> regions);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a list of establishment Unique Reference Numbers (URNs) by region.
        /// </summary>
        /// <param name="regions">Array of regions.</param>
        /// <returns>Successfully found and returned the establishment Unique Reference Numbers (URNs).</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<int>> GetURNsByRegion2Async(System.Collections.Generic.IEnumerable<string> regions, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves a list of establishments by their Unique Reference Numbers (URNs).
        /// </summary>
        /// <param name="request">Contains Unique Reference Number (URNs) of the establishments.</param>
        /// <returns>Successfully found and returned the establishments.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<EstablishmentDto>> GetByUrns2Async(System.Collections.Generic.IEnumerable<int> request);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a list of establishments by their Unique Reference Numbers (URNs).
        /// </summary>
        /// <param name="request">Contains Unique Reference Number (URNs) of the establishments.</param>
        /// <returns>Successfully found and returned the establishments.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<EstablishmentDto>> GetByUrns2Async(System.Collections.Generic.IEnumerable<int> request, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves a list of establishments by their Trust UK Provider Reference Number (UKPRN) identifier.
        /// </summary>
        /// <param name="trustUkprn">Contains the Trust UK Provider Reference Number (UKPRN) identifier of the establishments.</param>
        /// <returns>Successfully found and returned the establishments.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<EstablishmentDto>> GetByTrustAsync(string trustUkprn);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a list of establishments by their Trust UK Provider Reference Number (UKPRN) identifier.
        /// </summary>
        /// <param name="trustUkprn">Contains the Trust UK Provider Reference Number (UKPRN) identifier of the establishments.</param>
        /// <returns>Successfully found and returned the establishments.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<EstablishmentDto>> GetByTrustAsync(string trustUkprn, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves a list of establishments by their UKPRNs.
        /// </summary>
        /// <param name="ukprn">Contains UKPRNs of the establishments.</param>
        /// <returns>Successfully found and returned the establishments.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<EstablishmentResponse>> GetByUKPRNsAsync(System.Collections.Generic.IEnumerable<string> ukprn);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a list of establishments by their UKPRNs.
        /// </summary>
        /// <param name="ukprn">Contains UKPRNs of the establishments.</param>
        /// <returns>Successfully found and returned the establishments.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<EstablishmentResponse>> GetByUKPRNsAsync(System.Collections.Generic.IEnumerable<string> ukprn, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITrustsV4Client
    {
        /// <summary>
        /// Retrieves a Trust by its UK Provider Reference Number (UKPRN).
        /// </summary>
        /// <param name="ukprn">The UK Provider Reference Number (UKPRN) identifier.</param>
        /// <returns>Successfully found and returned the Trust.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TrustDto> GetTrustByUkprn2Async(string ukprn);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a Trust by its UK Provider Reference Number (UKPRN).
        /// </summary>
        /// <param name="ukprn">The UK Provider Reference Number (UKPRN) identifier.</param>
        /// <returns>Successfully found and returned the Trust.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TrustDto> GetTrustByUkprn2Async(string ukprn, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves a Trust by its Companies House Number.
        /// </summary>
        /// <param name="companiesHouseNumber">The Companies House Number identifier.</param>
        /// <returns>Successfully found and returned the Trust.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TrustDto> GetTrustByCompaniesHouseNumberAsync(string companiesHouseNumber);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a Trust by its Companies House Number.
        /// </summary>
        /// <param name="companiesHouseNumber">The Companies House Number identifier.</param>
        /// <returns>Successfully found and returned the Trust.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TrustDto> GetTrustByCompaniesHouseNumberAsync(string companiesHouseNumber, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves a Trust by its Companies House Number.
        /// </summary>
        /// <returns>Successfully found and returned the Trust.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TrustDto> GetTrustByTrustReferenceNumberAsync(string trustReferenceNumber);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a Trust by its Companies House Number.
        /// </summary>
        /// <returns>Successfully found and returned the Trust.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TrustDto> GetTrustByTrustReferenceNumberAsync(string trustReferenceNumber, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Searches for Trusts based on query parameters.
        /// </summary>
        /// <param name="groupName">Name of the group.</param>
        /// <param name="ukPrn">UK Provider Reference Number (UKPRN) identifier.</param>
        /// <param name="companiesHouseNumber">Companies House Number.</param>
        /// <param name="page">Pagination page.</param>
        /// <param name="count">Number of results per page.</param>
        /// <param name="status">The status of the trust, defaults to "Open"</param>
        /// <returns>Successfully executed the search and returned Trusts.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PagedDataResponseOfTrustDto> SearchTrusts3Async(string groupName, string ukPrn, string companiesHouseNumber, int? page, int? count, TrustStatus? status);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Searches for Trusts based on query parameters.
        /// </summary>
        /// <param name="groupName">Name of the group.</param>
        /// <param name="ukPrn">UK Provider Reference Number (UKPRN) identifier.</param>
        /// <param name="companiesHouseNumber">Companies House Number.</param>
        /// <param name="page">Pagination page.</param>
        /// <param name="count">Number of results per page.</param>
        /// <param name="status">The status of the trust, defaults to "Open"</param>
        /// <returns>Successfully executed the search and returned Trusts.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PagedDataResponseOfTrustDto> SearchTrusts3Async(string groupName, string ukPrn, string companiesHouseNumber, int? page, int? count, TrustStatus? status, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns Trusts based on supplied list of Ukprns query parameter.
        /// </summary>
        /// <param name="ukprns">List of ukprns to search for.</param>
        /// <returns>Successfully retrieved the trusts.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TrustDto>> GetByUkprnsAllAsync(System.Collections.Generic.IEnumerable<string> ukprns);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns Trusts based on supplied list of Ukprns query parameter.
        /// </summary>
        /// <param name="ukprns">List of ukprns to search for.</param>
        /// <returns>Successfully retrieved the trusts.</returns>
        /// <exception cref="AcademiesApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<TrustDto>> GetByUkprnsAllAsync(System.Collections.Generic.IEnumerable<string> ukprns, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EstablishmentResponse
    {
        [Newtonsoft.Json.JsonProperty("urn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Urn { get; set; }

        [Newtonsoft.Json.JsonProperty("localAuthorityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocalAuthorityCode { get; set; }

        [Newtonsoft.Json.JsonProperty("localAuthorityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocalAuthorityName { get; set; }

        [Newtonsoft.Json.JsonProperty("establishmentNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EstablishmentNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("establishmentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EstablishmentName { get; set; }

        [Newtonsoft.Json.JsonProperty("establishmentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeResponse EstablishmentType { get; set; }

        [Newtonsoft.Json.JsonProperty("establishmentTypeGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeResponse EstablishmentTypeGroup { get; set; }

        [Newtonsoft.Json.JsonProperty("establishmentStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeResponse EstablishmentStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("reasonEstablishmentOpened", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeResponse ReasonEstablishmentOpened { get; set; }

        [Newtonsoft.Json.JsonProperty("openDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OpenDate { get; set; }

        [Newtonsoft.Json.JsonProperty("reasonEstablishmentClosed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeResponse ReasonEstablishmentClosed { get; set; }

        [Newtonsoft.Json.JsonProperty("closeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CloseDate { get; set; }

        [Newtonsoft.Json.JsonProperty("phaseOfEducation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeResponse PhaseOfEducation { get; set; }

        [Newtonsoft.Json.JsonProperty("statutoryLowAge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatutoryLowAge { get; set; }

        [Newtonsoft.Json.JsonProperty("statutoryHighAge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatutoryHighAge { get; set; }

        [Newtonsoft.Json.JsonProperty("boarders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeResponse Boarders { get; set; }

        [Newtonsoft.Json.JsonProperty("nurseryProvision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NurseryProvision { get; set; }

        [Newtonsoft.Json.JsonProperty("officialSixthForm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeResponse OfficialSixthForm { get; set; }

        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeResponse Gender { get; set; }

        [Newtonsoft.Json.JsonProperty("religiousCharacter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeResponse ReligiousCharacter { get; set; }

        [Newtonsoft.Json.JsonProperty("religiousEthos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReligiousEthos { get; set; }

        [Newtonsoft.Json.JsonProperty("diocese", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeResponse Diocese { get; set; }

        [Newtonsoft.Json.JsonProperty("admissionsPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeResponse AdmissionsPolicy { get; set; }

        [Newtonsoft.Json.JsonProperty("schoolCapacity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchoolCapacity { get; set; }

        [Newtonsoft.Json.JsonProperty("specialClasses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeResponse SpecialClasses { get; set; }

        [Newtonsoft.Json.JsonProperty("census", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CensusResponse Census { get; set; }

        [Newtonsoft.Json.JsonProperty("trustSchoolFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeResponse TrustSchoolFlag { get; set; }

        [Newtonsoft.Json.JsonProperty("trusts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeResponse Trusts { get; set; }

        [Newtonsoft.Json.JsonProperty("schoolSponsorFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchoolSponsorFlag { get; set; }

        [Newtonsoft.Json.JsonProperty("schoolSponsors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchoolSponsors { get; set; }

        [Newtonsoft.Json.JsonProperty("federationFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FederationFlag { get; set; }

        [Newtonsoft.Json.JsonProperty("federations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeResponse Federations { get; set; }

        [Newtonsoft.Json.JsonProperty("ukprn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ukprn { get; set; }

        [Newtonsoft.Json.JsonProperty("feheiIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FeheiIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("furtherEducationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FurtherEducationType { get; set; }

        [Newtonsoft.Json.JsonProperty("ofstedLastInspection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfstedLastInspection { get; set; }

        [Newtonsoft.Json.JsonProperty("ofstedSpecialMeasures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeResponse OfstedSpecialMeasures { get; set; }

        [Newtonsoft.Json.JsonProperty("lastChangedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastChangedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressResponse Address { get; set; }

        [Newtonsoft.Json.JsonProperty("schoolWebsite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchoolWebsite { get; set; }

        [Newtonsoft.Json.JsonProperty("telephoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TelephoneNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("headteacherTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HeadteacherTitle { get; set; }

        [Newtonsoft.Json.JsonProperty("headteacherFirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HeadteacherFirstName { get; set; }

        [Newtonsoft.Json.JsonProperty("headteacherLastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HeadteacherLastName { get; set; }

        [Newtonsoft.Json.JsonProperty("headteacherPreferredJobTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HeadteacherPreferredJobTitle { get; set; }

        [Newtonsoft.Json.JsonProperty("inspectorateName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InspectorateName { get; set; }

        [Newtonsoft.Json.JsonProperty("inspectorateReport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InspectorateReport { get; set; }

        [Newtonsoft.Json.JsonProperty("dateOfLastInspectionVisit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateOfLastInspectionVisit { get; set; }

        [Newtonsoft.Json.JsonProperty("dateOfNextInspectionVisit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateOfNextInspectionVisit { get; set; }

        [Newtonsoft.Json.JsonProperty("teenMoth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TeenMoth { get; set; }

        [Newtonsoft.Json.JsonProperty("teenMothPlaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TeenMothPlaces { get; set; }

        [Newtonsoft.Json.JsonProperty("ccf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ccf { get; set; }

        [Newtonsoft.Json.JsonProperty("senpru", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Senpru { get; set; }

        [Newtonsoft.Json.JsonProperty("ebd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ebd { get; set; }

        [Newtonsoft.Json.JsonProperty("placesPRU", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlacesPRU { get; set; }

        [Newtonsoft.Json.JsonProperty("ftProv", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FtProv { get; set; }

        [Newtonsoft.Json.JsonProperty("edByOther", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EdByOther { get; set; }

        [Newtonsoft.Json.JsonProperty("section14Approved", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Section14Approved { get; set; }

        [Newtonsoft.Json.JsonProperty("seN1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SeN1 { get; set; }

        [Newtonsoft.Json.JsonProperty("seN2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SeN2 { get; set; }

        [Newtonsoft.Json.JsonProperty("seN3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SeN3 { get; set; }

        [Newtonsoft.Json.JsonProperty("seN4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SeN4 { get; set; }

        [Newtonsoft.Json.JsonProperty("seN5", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SeN5 { get; set; }

        [Newtonsoft.Json.JsonProperty("seN6", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SeN6 { get; set; }

        [Newtonsoft.Json.JsonProperty("seN7", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SeN7 { get; set; }

        [Newtonsoft.Json.JsonProperty("seN8", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SeN8 { get; set; }

        [Newtonsoft.Json.JsonProperty("seN9", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SeN9 { get; set; }

        [Newtonsoft.Json.JsonProperty("seN10", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SeN10 { get; set; }

        [Newtonsoft.Json.JsonProperty("seN11", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SeN11 { get; set; }

        [Newtonsoft.Json.JsonProperty("seN12", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SeN12 { get; set; }

        [Newtonsoft.Json.JsonProperty("seN13", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SeN13 { get; set; }

        [Newtonsoft.Json.JsonProperty("typeOfResourcedProvision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeOfResourcedProvision { get; set; }

        [Newtonsoft.Json.JsonProperty("resourcedProvisionOnRoll", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourcedProvisionOnRoll { get; set; }

        [Newtonsoft.Json.JsonProperty("resourcedProvisionOnCapacity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourcedProvisionOnCapacity { get; set; }

        [Newtonsoft.Json.JsonProperty("senUnitOnRoll", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SenUnitOnRoll { get; set; }

        [Newtonsoft.Json.JsonProperty("senUnitCapacity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SenUnitCapacity { get; set; }

        [Newtonsoft.Json.JsonProperty("gor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeResponse Gor { get; set; }

        [Newtonsoft.Json.JsonProperty("districtAdministrative", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeResponse DistrictAdministrative { get; set; }

        [Newtonsoft.Json.JsonProperty("administractiveWard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeResponse AdministractiveWard { get; set; }

        [Newtonsoft.Json.JsonProperty("parliamentaryConstituency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeResponse ParliamentaryConstituency { get; set; }

        [Newtonsoft.Json.JsonProperty("urbanRural", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeResponse UrbanRural { get; set; }

        [Newtonsoft.Json.JsonProperty("gsslaCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GsslaCode { get; set; }

        [Newtonsoft.Json.JsonProperty("easting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Easting { get; set; }

        [Newtonsoft.Json.JsonProperty("northing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Northing { get; set; }

        [Newtonsoft.Json.JsonProperty("censusAreaStatisticWard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CensusAreaStatisticWard { get; set; }

        [Newtonsoft.Json.JsonProperty("msoa", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeResponse Msoa { get; set; }

        [Newtonsoft.Json.JsonProperty("lsoa", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeResponse Lsoa { get; set; }

        [Newtonsoft.Json.JsonProperty("senStat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SenStat { get; set; }

        [Newtonsoft.Json.JsonProperty("senNoStat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SenNoStat { get; set; }

        [Newtonsoft.Json.JsonProperty("boardingEstablishment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BoardingEstablishment { get; set; }

        [Newtonsoft.Json.JsonProperty("propsName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PropsName { get; set; }

        [Newtonsoft.Json.JsonProperty("previousLocalAuthority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeResponse PreviousLocalAuthority { get; set; }

        [Newtonsoft.Json.JsonProperty("previousEstablishmentNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviousEstablishmentNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("ofstedRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfstedRating { get; set; }

        [Newtonsoft.Json.JsonProperty("rscRegion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RscRegion { get; set; }

        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        [Newtonsoft.Json.JsonProperty("uprn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uprn { get; set; }

        [Newtonsoft.Json.JsonProperty("misEstablishment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MISEstablishmentResponse MisEstablishment { get; set; }

        [Newtonsoft.Json.JsonProperty("misFurtherEducationEstablishment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MISFEAResponse MisFurtherEducationEstablishment { get; set; }

        [Newtonsoft.Json.JsonProperty("viewAcademyConversion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ViewAcademyConversionResponse ViewAcademyConversion { get; set; }

        [Newtonsoft.Json.JsonProperty("smartData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SMARTDataResponse SmartData { get; set; }

        [Newtonsoft.Json.JsonProperty("financial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlaceholderResponse Financial { get; set; }

        [Newtonsoft.Json.JsonProperty("concerns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlaceholderResponse Concerns { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EstablishmentResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EstablishmentResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NameAndCodeResponse
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NameAndCodeResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NameAndCodeResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CensusResponse
    {
        [Newtonsoft.Json.JsonProperty("censusDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CensusDate { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfPupils", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumberOfPupils { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfBoys", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumberOfBoys { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfGirls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumberOfGirls { get; set; }

        [Newtonsoft.Json.JsonProperty("percentageSen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PercentageSen { get; set; }

        [Newtonsoft.Json.JsonProperty("percentageFsm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PercentageFsm { get; set; }

        [Newtonsoft.Json.JsonProperty("percentageEnglishNotFirstLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PercentageEnglishNotFirstLanguage { get; set; }

        [Newtonsoft.Json.JsonProperty("perceantageEnglishFirstLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PerceantageEnglishFirstLanguage { get; set; }

        [Newtonsoft.Json.JsonProperty("percentageFirstLanguageUnclassified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PercentageFirstLanguageUnclassified { get; set; }

        [Newtonsoft.Json.JsonProperty("numberEligableForFSM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumberEligableForFSM { get; set; }

        [Newtonsoft.Json.JsonProperty("numberEligableForFSM6Years", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumberEligableForFSM6Years { get; set; }

        [Newtonsoft.Json.JsonProperty("percentageEligableForFSM6Years", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PercentageEligableForFSM6Years { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CensusResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CensusResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressResponse
    {
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street { get; set; }

        [Newtonsoft.Json.JsonProperty("locality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locality { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdditionalLine { get; set; }

        [Newtonsoft.Json.JsonProperty("town", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Town { get; set; }

        [Newtonsoft.Json.JsonProperty("county", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string County { get; set; }

        [Newtonsoft.Json.JsonProperty("postcode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Postcode { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AddressResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AddressResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MISEstablishmentResponse
    {
        [Newtonsoft.Json.JsonProperty("siteName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SiteName { get; set; }

        [Newtonsoft.Json.JsonProperty("webLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebLink { get; set; }

        [Newtonsoft.Json.JsonProperty("laestab", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Laestab { get; set; }

        [Newtonsoft.Json.JsonProperty("schoolName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchoolName { get; set; }

        [Newtonsoft.Json.JsonProperty("ofstedPhase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfstedPhase { get; set; }

        [Newtonsoft.Json.JsonProperty("typeOfEducation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeOfEducation { get; set; }

        [Newtonsoft.Json.JsonProperty("schoolOpenDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchoolOpenDate { get; set; }

        [Newtonsoft.Json.JsonProperty("sixthForm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SixthForm { get; set; }

        [Newtonsoft.Json.JsonProperty("designatedReligiousCharacter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DesignatedReligiousCharacter { get; set; }

        [Newtonsoft.Json.JsonProperty("religiousEthos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReligiousEthos { get; set; }

        [Newtonsoft.Json.JsonProperty("faithGrouping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FaithGrouping { get; set; }

        [Newtonsoft.Json.JsonProperty("ofstedRegion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfstedRegion { get; set; }

        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Region { get; set; }

        [Newtonsoft.Json.JsonProperty("localAuthority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocalAuthority { get; set; }

        [Newtonsoft.Json.JsonProperty("parliamentaryConstituency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParliamentaryConstituency { get; set; }

        [Newtonsoft.Json.JsonProperty("postcode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Postcode { get; set; }

        [Newtonsoft.Json.JsonProperty("incomeDeprivationAffectingChildrenIndexQuintile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IncomeDeprivationAffectingChildrenIndexQuintile { get; set; }

        [Newtonsoft.Json.JsonProperty("totalNumberOfPupils", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TotalNumberOfPupils { get; set; }

        [Newtonsoft.Json.JsonProperty("latestSection8InspectionNumberSinceLastFullInspection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LatestSection8InspectionNumberSinceLastFullInspection { get; set; }

        [Newtonsoft.Json.JsonProperty("section8InspectionRelatedToCurrentSchoolUrn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Section8InspectionRelatedToCurrentSchoolUrn { get; set; }

        [Newtonsoft.Json.JsonProperty("urnAtTimeOfSection8Inspection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrnAtTimeOfSection8Inspection { get; set; }

        [Newtonsoft.Json.JsonProperty("schoolNameAtTimeOfSection8Inspection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchoolNameAtTimeOfSection8Inspection { get; set; }

        [Newtonsoft.Json.JsonProperty("schoolTypeAtTimeOfSection8Inspection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchoolTypeAtTimeOfSection8Inspection { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfSection8InspectionsSinceLastFullInspection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumberOfSection8InspectionsSinceLastFullInspection { get; set; }

        [Newtonsoft.Json.JsonProperty("dateOfLatestSection8Inspection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateOfLatestSection8Inspection { get; set; }

        [Newtonsoft.Json.JsonProperty("section8InspectionPublicationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Section8InspectionPublicationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("latestSection8InspectionConvertedToFullInspection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LatestSection8InspectionConvertedToFullInspection { get; set; }

        [Newtonsoft.Json.JsonProperty("section8InspectionOverallOutcome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Section8InspectionOverallOutcome { get; set; }

        [Newtonsoft.Json.JsonProperty("inspectionNumberOfLatestFullInspection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InspectionNumberOfLatestFullInspection { get; set; }

        [Newtonsoft.Json.JsonProperty("inspectionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InspectionType { get; set; }

        [Newtonsoft.Json.JsonProperty("inspectionTypeGrouping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InspectionTypeGrouping { get; set; }

        [Newtonsoft.Json.JsonProperty("inspectionStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InspectionStartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("inspectionEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InspectionEndDate { get; set; }

        [Newtonsoft.Json.JsonProperty("publicationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PublicationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("latestFullInspectionRelatesToCurrentSchoolUrn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LatestFullInspectionRelatesToCurrentSchoolUrn { get; set; }

        [Newtonsoft.Json.JsonProperty("schoolUrnAtTimeOfLastFullInspection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchoolUrnAtTimeOfLastFullInspection { get; set; }

        [Newtonsoft.Json.JsonProperty("laestabAtTimeOfLastFullInspection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LaestabAtTimeOfLastFullInspection { get; set; }

        [Newtonsoft.Json.JsonProperty("schoolNameAtTimeOfLastFullInspection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchoolNameAtTimeOfLastFullInspection { get; set; }

        [Newtonsoft.Json.JsonProperty("schoolTypeAtTimeOfLastFullInspection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchoolTypeAtTimeOfLastFullInspection { get; set; }

        [Newtonsoft.Json.JsonProperty("overallEffectiveness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OverallEffectiveness { get; set; }

        [Newtonsoft.Json.JsonProperty("categoryOfConcern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CategoryOfConcern { get; set; }

        [Newtonsoft.Json.JsonProperty("qualityOfEducation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QualityOfEducation { get; set; }

        [Newtonsoft.Json.JsonProperty("behaviourAndAttitudes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BehaviourAndAttitudes { get; set; }

        [Newtonsoft.Json.JsonProperty("personalDevelopment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonalDevelopment { get; set; }

        [Newtonsoft.Json.JsonProperty("effectivenessOfLeadershipAndManagement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EffectivenessOfLeadershipAndManagement { get; set; }

        [Newtonsoft.Json.JsonProperty("safeguardingIsEffective", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SafeguardingIsEffective { get; set; }

        [Newtonsoft.Json.JsonProperty("earlyYearsProvision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EarlyYearsProvision { get; set; }

        [Newtonsoft.Json.JsonProperty("sixthFormProvision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SixthFormProvision { get; set; }

        [Newtonsoft.Json.JsonProperty("previousFullInspectionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviousFullInspectionNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("previousInspectionStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviousInspectionStartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("previousInspectionEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviousInspectionEndDate { get; set; }

        [Newtonsoft.Json.JsonProperty("previousPublicationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviousPublicationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("previousFullInspectionRelatesToUrnOfCurrentSchool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviousFullInspectionRelatesToUrnOfCurrentSchool { get; set; }

        [Newtonsoft.Json.JsonProperty("urnAtTheTimeOfPreviousFullInspection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrnAtTheTimeOfPreviousFullInspection { get; set; }

        [Newtonsoft.Json.JsonProperty("laestabAtTheTimeOfPreviousFullInspection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LaestabAtTheTimeOfPreviousFullInspection { get; set; }

        [Newtonsoft.Json.JsonProperty("schoolNameAtTheTimeOfPreviousFullInspection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchoolNameAtTheTimeOfPreviousFullInspection { get; set; }

        [Newtonsoft.Json.JsonProperty("schoolTypeAtTheTimeOfPreviousFullInspection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchoolTypeAtTheTimeOfPreviousFullInspection { get; set; }

        [Newtonsoft.Json.JsonProperty("previousFullInspectionOverallEffectiveness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviousFullInspectionOverallEffectiveness { get; set; }

        [Newtonsoft.Json.JsonProperty("previousCategoryOfConcern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviousCategoryOfConcern { get; set; }

        [Newtonsoft.Json.JsonProperty("previousQualityOfEducation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviousQualityOfEducation { get; set; }

        [Newtonsoft.Json.JsonProperty("previousBehaviourAndAttitudes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviousBehaviourAndAttitudes { get; set; }

        [Newtonsoft.Json.JsonProperty("previousPersonalDevelopment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviousPersonalDevelopment { get; set; }

        [Newtonsoft.Json.JsonProperty("previousEffectivenessOfLeadershipAndManagement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviousEffectivenessOfLeadershipAndManagement { get; set; }

        [Newtonsoft.Json.JsonProperty("previousIsSafeguardingEffective", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviousIsSafeguardingEffective { get; set; }

        [Newtonsoft.Json.JsonProperty("previousEarlyYearsProvision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviousEarlyYearsProvision { get; set; }

        [Newtonsoft.Json.JsonProperty("previousSixthFormProvision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviousSixthFormProvision { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MISEstablishmentResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MISEstablishmentResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MISFEAResponse
    {
        [Newtonsoft.Json.JsonProperty("provider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProviderResponse Provider { get; set; }

        [Newtonsoft.Json.JsonProperty("localAuthority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocalAuthority { get; set; }

        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Region { get; set; }

        [Newtonsoft.Json.JsonProperty("ofstedRegion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfstedRegion { get; set; }

        [Newtonsoft.Json.JsonProperty("dateOfLatestShortInspection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateOfLatestShortInspection { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfShortInspectionsSinceLastFullInspectionRAW", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumberOfShortInspectionsSinceLastFullInspectionRAW { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfShortInspectionsSinceLastFullInspection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumberOfShortInspectionsSinceLastFullInspection { get; set; }

        [Newtonsoft.Json.JsonProperty("inspectionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InspectionNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("inspectionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InspectionType { get; set; }

        [Newtonsoft.Json.JsonProperty("firstDayOfInspection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstDayOfInspection { get; set; }

        [Newtonsoft.Json.JsonProperty("lastDayOfInspection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastDayOfInspection { get; set; }

        [Newtonsoft.Json.JsonProperty("datePublished", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DatePublished { get; set; }

        [Newtonsoft.Json.JsonProperty("overallEffectivenessRAW", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OverallEffectivenessRAW { get; set; }

        [Newtonsoft.Json.JsonProperty("overallEffectiveness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OverallEffectiveness { get; set; }

        [Newtonsoft.Json.JsonProperty("qualityOfEducationRAW", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QualityOfEducationRAW { get; set; }

        [Newtonsoft.Json.JsonProperty("qualityOfEducation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QualityOfEducation { get; set; }

        [Newtonsoft.Json.JsonProperty("behaviourAndAttitudesRAW", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BehaviourAndAttitudesRAW { get; set; }

        [Newtonsoft.Json.JsonProperty("behaviourAndAttitudes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BehaviourAndAttitudes { get; set; }

        [Newtonsoft.Json.JsonProperty("personalDevelopmentRAW", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonalDevelopmentRAW { get; set; }

        [Newtonsoft.Json.JsonProperty("personalDevelopment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonalDevelopment { get; set; }

        [Newtonsoft.Json.JsonProperty("effectivenessOfLeadershipAndManagementRAW", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EffectivenessOfLeadershipAndManagementRAW { get; set; }

        [Newtonsoft.Json.JsonProperty("effectivenessOfLeadershipAndManagement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EffectivenessOfLeadershipAndManagement { get; set; }

        [Newtonsoft.Json.JsonProperty("isSafeguardingEffective", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IsSafeguardingEffective { get; set; }

        [Newtonsoft.Json.JsonProperty("previousInspectionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviousInspectionNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("previousLastDayOfInspection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviousLastDayOfInspection { get; set; }

        [Newtonsoft.Json.JsonProperty("previousOverallEffectivenessRAW", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviousOverallEffectivenessRAW { get; set; }

        [Newtonsoft.Json.JsonProperty("previousOverallEffectiveness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviousOverallEffectiveness { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MISFEAResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MISFEAResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProviderResponse
    {
        [Newtonsoft.Json.JsonProperty("urn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Urn { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Group { get; set; }

        [Newtonsoft.Json.JsonProperty("ukprn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Ukprn { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProviderResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProviderResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ViewAcademyConversionResponse
    {
        [Newtonsoft.Json.JsonProperty("viabilityIssue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ViabilityIssue { get; set; }

        [Newtonsoft.Json.JsonProperty("pfi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pfi { get; set; }

        [Newtonsoft.Json.JsonProperty("pan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pan { get; set; }

        [Newtonsoft.Json.JsonProperty("deficit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deficit { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ViewAcademyConversionResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ViewAcademyConversionResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SMARTDataResponse
    {
        [Newtonsoft.Json.JsonProperty("probabilityOfDeclining", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProbabilityOfDeclining { get; set; }

        [Newtonsoft.Json.JsonProperty("probabilityOfStayingTheSame", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProbabilityOfStayingTheSame { get; set; }

        [Newtonsoft.Json.JsonProperty("probabilityOfImproving", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProbabilityOfImproving { get; set; }

        [Newtonsoft.Json.JsonProperty("predictedChangeInProgress8Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PredictedChangeInProgress8Score { get; set; }

        [Newtonsoft.Json.JsonProperty("predictedChanceOfChangeOccurring", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PredictedChanceOfChangeOccurring { get; set; }

        [Newtonsoft.Json.JsonProperty("totalNumberOfRisks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TotalNumberOfRisks { get; set; }

        [Newtonsoft.Json.JsonProperty("totalRiskScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TotalRiskScore { get; set; }

        [Newtonsoft.Json.JsonProperty("riskRatingNum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RiskRatingNum { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SMARTDataResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SMARTDataResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlaceholderResponse
    {
        [Newtonsoft.Json.JsonProperty("urn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Urn { get; set; }

        [Newtonsoft.Json.JsonProperty("ukprn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ukprn { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Group { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PlaceholderResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlaceholderResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EstablishmentSummaryResponse
    {
        [Newtonsoft.Json.JsonProperty("urn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Urn { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("ukprn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ukprn { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EstablishmentSummaryResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EstablishmentSummaryResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EducationalPerformanceResponse
    {
        [Newtonsoft.Json.JsonProperty("schoolName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchoolName { get; set; }

        [Newtonsoft.Json.JsonProperty("keyStage1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<KeyStage1PerformanceResponse> KeyStage1 { get; set; }

        [Newtonsoft.Json.JsonProperty("keyStage2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<KeyStage2PerformanceResponse> KeyStage2 { get; set; }

        [Newtonsoft.Json.JsonProperty("keyStage4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<KeyStage4PerformanceResponse> KeyStage4 { get; set; }

        [Newtonsoft.Json.JsonProperty("keyStage5", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<KeyStage5PerformanceResponse> KeyStage5 { get; set; }

        [Newtonsoft.Json.JsonProperty("absenceData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SchoolAbsenceDataDto> AbsenceData { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EducationalPerformanceResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EducationalPerformanceResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeyStage1PerformanceResponse
    {
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Year { get; set; }

        [Newtonsoft.Json.JsonProperty("reading", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Reading { get; set; }

        [Newtonsoft.Json.JsonProperty("writing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Writing { get; set; }

        [Newtonsoft.Json.JsonProperty("maths", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Maths { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static KeyStage1PerformanceResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<KeyStage1PerformanceResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeyStage2PerformanceResponse
    {
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Year { get; set; }

        [Newtonsoft.Json.JsonProperty("percentageMeetingExpectedStdInRWM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse PercentageMeetingExpectedStdInRWM { get; set; }

        [Newtonsoft.Json.JsonProperty("percentageAchievingHigherStdInRWM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse PercentageAchievingHigherStdInRWM { get; set; }

        [Newtonsoft.Json.JsonProperty("readingProgressScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse ReadingProgressScore { get; set; }

        [Newtonsoft.Json.JsonProperty("writingProgressScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse WritingProgressScore { get; set; }

        [Newtonsoft.Json.JsonProperty("mathsProgressScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse MathsProgressScore { get; set; }

        [Newtonsoft.Json.JsonProperty("nationalAveragePercentageMeetingExpectedStdInRWM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse NationalAveragePercentageMeetingExpectedStdInRWM { get; set; }

        [Newtonsoft.Json.JsonProperty("nationalAveragePercentageAchievingHigherStdInRWM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse NationalAveragePercentageAchievingHigherStdInRWM { get; set; }

        [Newtonsoft.Json.JsonProperty("nationalAverageReadingProgressScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse NationalAverageReadingProgressScore { get; set; }

        [Newtonsoft.Json.JsonProperty("nationalAverageWritingProgressScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse NationalAverageWritingProgressScore { get; set; }

        [Newtonsoft.Json.JsonProperty("nationalAverageMathsProgressScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse NationalAverageMathsProgressScore { get; set; }

        [Newtonsoft.Json.JsonProperty("laAveragePercentageMeetingExpectedStdInRWM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse LaAveragePercentageMeetingExpectedStdInRWM { get; set; }

        [Newtonsoft.Json.JsonProperty("laAveragePercentageAchievingHigherStdInRWM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse LaAveragePercentageAchievingHigherStdInRWM { get; set; }

        [Newtonsoft.Json.JsonProperty("laAverageReadingProgressScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse LaAverageReadingProgressScore { get; set; }

        [Newtonsoft.Json.JsonProperty("laAverageWritingProgressScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse LaAverageWritingProgressScore { get; set; }

        [Newtonsoft.Json.JsonProperty("laAverageMathsProgressScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse LaAverageMathsProgressScore { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static KeyStage2PerformanceResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<KeyStage2PerformanceResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DisadvantagedPupilsResponse
    {
        [Newtonsoft.Json.JsonProperty("notDisadvantaged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotDisadvantaged { get; set; }

        [Newtonsoft.Json.JsonProperty("disadvantaged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Disadvantaged { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DisadvantagedPupilsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisadvantagedPupilsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeyStage4PerformanceResponse
    {
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Year { get; set; }

        [Newtonsoft.Json.JsonProperty("sipAttainment8score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse SipAttainment8score { get; set; }

        [Newtonsoft.Json.JsonProperty("sipAttainment8scoreenglish", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse SipAttainment8scoreenglish { get; set; }

        [Newtonsoft.Json.JsonProperty("sipAttainment8scoremaths", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse SipAttainment8scoremaths { get; set; }

        [Newtonsoft.Json.JsonProperty("sipAttainment8scoreebacc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse SipAttainment8scoreebacc { get; set; }

        [Newtonsoft.Json.JsonProperty("sipNumberofpupilsprogress8", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse SipNumberofpupilsprogress8 { get; set; }

        [Newtonsoft.Json.JsonProperty("sipProgress8upperconfidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? SipProgress8upperconfidence { get; set; }

        [Newtonsoft.Json.JsonProperty("sipProgress8lowerconfidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? SipProgress8lowerconfidence { get; set; }

        [Newtonsoft.Json.JsonProperty("sipProgress8english", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse SipProgress8english { get; set; }

        [Newtonsoft.Json.JsonProperty("sipProgress8maths", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse SipProgress8maths { get; set; }

        [Newtonsoft.Json.JsonProperty("sipProgress8ebacc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse SipProgress8ebacc { get; set; }

        [Newtonsoft.Json.JsonProperty("sipProgress8Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse SipProgress8Score { get; set; }

        [Newtonsoft.Json.JsonProperty("nationalAverageA8Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse NationalAverageA8Score { get; set; }

        [Newtonsoft.Json.JsonProperty("nationalAverageA8English", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse NationalAverageA8English { get; set; }

        [Newtonsoft.Json.JsonProperty("nationalAverageA8Maths", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse NationalAverageA8Maths { get; set; }

        [Newtonsoft.Json.JsonProperty("nationalAverageA8EBacc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse NationalAverageA8EBacc { get; set; }

        [Newtonsoft.Json.JsonProperty("nationalAverageP8PupilsIncluded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse NationalAverageP8PupilsIncluded { get; set; }

        [Newtonsoft.Json.JsonProperty("nationalAverageP8Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse NationalAverageP8Score { get; set; }

        [Newtonsoft.Json.JsonProperty("nationalAverageP8LowerConfidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? NationalAverageP8LowerConfidence { get; set; }

        [Newtonsoft.Json.JsonProperty("nationalAverageP8UpperConfidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? NationalAverageP8UpperConfidence { get; set; }

        [Newtonsoft.Json.JsonProperty("nationalAverageP8English", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse NationalAverageP8English { get; set; }

        [Newtonsoft.Json.JsonProperty("nationalAverageP8Maths", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse NationalAverageP8Maths { get; set; }

        [Newtonsoft.Json.JsonProperty("nationalAverageP8Ebacc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse NationalAverageP8Ebacc { get; set; }

        [Newtonsoft.Json.JsonProperty("laAverageA8Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse LaAverageA8Score { get; set; }

        [Newtonsoft.Json.JsonProperty("laAverageA8English", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse LaAverageA8English { get; set; }

        [Newtonsoft.Json.JsonProperty("laAverageA8Maths", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse LaAverageA8Maths { get; set; }

        [Newtonsoft.Json.JsonProperty("laAverageA8EBacc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse LaAverageA8EBacc { get; set; }

        [Newtonsoft.Json.JsonProperty("laAverageP8PupilsIncluded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse LaAverageP8PupilsIncluded { get; set; }

        [Newtonsoft.Json.JsonProperty("laAverageP8Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse LaAverageP8Score { get; set; }

        [Newtonsoft.Json.JsonProperty("laAverageP8LowerConfidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? LaAverageP8LowerConfidence { get; set; }

        [Newtonsoft.Json.JsonProperty("laAverageP8UpperConfidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? LaAverageP8UpperConfidence { get; set; }

        [Newtonsoft.Json.JsonProperty("laAverageP8English", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse LaAverageP8English { get; set; }

        [Newtonsoft.Json.JsonProperty("laAverageP8Maths", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse LaAverageP8Maths { get; set; }

        [Newtonsoft.Json.JsonProperty("laAverageP8Ebacc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse LaAverageP8Ebacc { get; set; }

        [Newtonsoft.Json.JsonProperty("laEnteringEbacc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? LaEnteringEbacc { get; set; }

        [Newtonsoft.Json.JsonProperty("enteringebacc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Enteringebacc { get; set; }

        [Newtonsoft.Json.JsonProperty("nationalEnteringEbacc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? NationalEnteringEbacc { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static KeyStage4PerformanceResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<KeyStage4PerformanceResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeyStage5PerformanceResponse
    {
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Year { get; set; }

        [Newtonsoft.Json.JsonProperty("academicQualificationAverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? AcademicQualificationAverage { get; set; }

        [Newtonsoft.Json.JsonProperty("appliedGeneralQualificationAverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? AppliedGeneralQualificationAverage { get; set; }

        [Newtonsoft.Json.JsonProperty("nationalAcademicQualificationAverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? NationalAcademicQualificationAverage { get; set; }

        [Newtonsoft.Json.JsonProperty("nationalAppliedGeneralQualificationAverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? NationalAppliedGeneralQualificationAverage { get; set; }

        [Newtonsoft.Json.JsonProperty("laAcademicQualificationAverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? LaAcademicQualificationAverage { get; set; }

        [Newtonsoft.Json.JsonProperty("laAppliedGeneralQualificationAverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? LaAppliedGeneralQualificationAverage { get; set; }

        [Newtonsoft.Json.JsonProperty("appliedGeneralProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse AppliedGeneralProgress { get; set; }

        [Newtonsoft.Json.JsonProperty("academicProgress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisadvantagedPupilsResponse AcademicProgress { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static KeyStage5PerformanceResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<KeyStage5PerformanceResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchoolAbsenceDataDto
    {
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Year { get; set; }

        [Newtonsoft.Json.JsonProperty("overallAbsence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OverallAbsence { get; set; }

        [Newtonsoft.Json.JsonProperty("persistentAbsence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersistentAbsence { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SchoolAbsenceDataDto FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchoolAbsenceDataDto>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrustResponse
    {
        [Newtonsoft.Json.JsonProperty("ifdData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IFDDataResponse IfdData { get; set; }

        [Newtonsoft.Json.JsonProperty("giasData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GIASDataResponse GiasData { get; set; }

        [Newtonsoft.Json.JsonProperty("establishments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<EstablishmentResponse> Establishments { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TrustResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrustResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IFDDataResponse
    {
        [Newtonsoft.Json.JsonProperty("trustOpenDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrustOpenDate { get; set; }

        [Newtonsoft.Json.JsonProperty("leadRSCRegion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LeadRSCRegion { get; set; }

        [Newtonsoft.Json.JsonProperty("trustContactPhoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrustContactPhoneNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("performanceAndRiskDateOfMeeting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PerformanceAndRiskDateOfMeeting { get; set; }

        [Newtonsoft.Json.JsonProperty("prioritisedAreaOfReview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrioritisedAreaOfReview { get; set; }

        [Newtonsoft.Json.JsonProperty("currentSingleListGrouping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentSingleListGrouping { get; set; }

        [Newtonsoft.Json.JsonProperty("dateOfGroupingDecision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateOfGroupingDecision { get; set; }

        [Newtonsoft.Json.JsonProperty("dateEnteredOntoSingleList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateEnteredOntoSingleList { get; set; }

        [Newtonsoft.Json.JsonProperty("trustReviewWriteup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrustReviewWriteup { get; set; }

        [Newtonsoft.Json.JsonProperty("dateOfTrustReviewMeeting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateOfTrustReviewMeeting { get; set; }

        [Newtonsoft.Json.JsonProperty("followupLetterSent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FollowupLetterSent { get; set; }

        [Newtonsoft.Json.JsonProperty("dateActionPlannedFor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateActionPlannedFor { get; set; }

        [Newtonsoft.Json.JsonProperty("wipSummaryGoesToMinister", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WipSummaryGoesToMinister { get; set; }

        [Newtonsoft.Json.JsonProperty("externalGovernanceReviewDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalGovernanceReviewDate { get; set; }

        [Newtonsoft.Json.JsonProperty("efficiencyICFPreviewCompleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EfficiencyICFPreviewCompleted { get; set; }

        [Newtonsoft.Json.JsonProperty("efficiencyICFPreviewOther", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EfficiencyICFPreviewOther { get; set; }

        [Newtonsoft.Json.JsonProperty("linkToWorkplaceForEfficiencyICFReview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LinkToWorkplaceForEfficiencyICFReview { get; set; }

        [Newtonsoft.Json.JsonProperty("numberInTrust", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumberInTrust { get; set; }

        [Newtonsoft.Json.JsonProperty("trustType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrustType { get; set; }

        [Newtonsoft.Json.JsonProperty("trustAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressResponse TrustAddress { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IFDDataResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IFDDataResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GIASDataResponse
    {
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("groupName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupName { get; set; }

        [Newtonsoft.Json.JsonProperty("groupType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupType { get; set; }

        [Newtonsoft.Json.JsonProperty("companiesHouseNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompaniesHouseNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("groupContactAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressResponse GroupContactAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("ukprn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ukprn { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GIASDataResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GIASDataResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrustSummaryResponse
    {
        [Newtonsoft.Json.JsonProperty("ukprn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ukprn { get; set; }

        [Newtonsoft.Json.JsonProperty("urn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Urn { get; set; }

        [Newtonsoft.Json.JsonProperty("groupName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupName { get; set; }

        [Newtonsoft.Json.JsonProperty("companiesHouseNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompaniesHouseNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("trustType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrustType { get; set; }

        [Newtonsoft.Json.JsonProperty("trustAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressResponse TrustAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("establishments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<EstablishmentSummaryResponse> Establishments { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TrustSummaryResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrustSummaryResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiResponseV2OfBaselineTrackerResponse
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<BaselineTrackerResponse> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("paging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagingResponse Paging { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ApiResponseV2OfBaselineTrackerResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApiResponseV2OfBaselineTrackerResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaselineTrackerResponse
    {
        [Newtonsoft.Json.JsonProperty("urn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Urn { get; set; }

        [Newtonsoft.Json.JsonProperty("routeOfProject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RouteOfProject { get; set; }

        [Newtonsoft.Json.JsonProperty("pupilNumberMethodology", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PupilNumberMethodology { get; set; }

        [Newtonsoft.Json.JsonProperty("academyFundingTypeCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AcademyFundingTypeCategory { get; set; }

        [Newtonsoft.Json.JsonProperty("academyOrderApprovedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? AcademyOrderApprovedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("currentConverionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CurrentConverionDate { get; set; }

        [Newtonsoft.Json.JsonProperty("laestab", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Laestab { get; set; }

        [Newtonsoft.Json.JsonProperty("newAcademyUrn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewAcademyUrn { get; set; }

        [Newtonsoft.Json.JsonProperty("projectStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("newLAEstab", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewLAEstab { get; set; }

        [Newtonsoft.Json.JsonProperty("newAcademyUKPRN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewAcademyUKPRN { get; set; }

        [Newtonsoft.Json.JsonProperty("ukPrn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UkPrn { get; set; }

        [Newtonsoft.Json.JsonProperty("projectName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectName { get; set; }

        [Newtonsoft.Json.JsonProperty("newAcademyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewAcademyName { get; set; }

        [Newtonsoft.Json.JsonProperty("schoolContactName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchoolContactName { get; set; }

        [Newtonsoft.Json.JsonProperty("schoolAddress1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchoolAddress1 { get; set; }

        [Newtonsoft.Json.JsonProperty("schoolAddress2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchoolAddress2 { get; set; }

        [Newtonsoft.Json.JsonProperty("schoolAddress3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchoolAddress3 { get; set; }

        [Newtonsoft.Json.JsonProperty("schoolAddress4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchoolAddress4 { get; set; }

        [Newtonsoft.Json.JsonProperty("schoolPostcode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchoolPostcode { get; set; }

        [Newtonsoft.Json.JsonProperty("schoolEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchoolEmail { get; set; }

        [Newtonsoft.Json.JsonProperty("sponsorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SponsorName { get; set; }

        [Newtonsoft.Json.JsonProperty("sponsorReferenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SponsorReferenceNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("leadSponsorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LeadSponsorId { get; set; }

        [Newtonsoft.Json.JsonProperty("sponsorEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SponsorEmail { get; set; }

        [Newtonsoft.Json.JsonProperty("nameOfTrust", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NameOfTrust { get; set; }

        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("groupType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupType { get; set; }

        [Newtonsoft.Json.JsonProperty("trustUID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrustUID { get; set; }

        [Newtonsoft.Json.JsonProperty("trustUKPRN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrustUKPRN { get; set; }

        [Newtonsoft.Json.JsonProperty("trustCompaniesHouseRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrustCompaniesHouseRef { get; set; }

        [Newtonsoft.Json.JsonProperty("la", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string La { get; set; }

        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Region { get; set; }

        [Newtonsoft.Json.JsonProperty("territory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Territory { get; set; }

        [Newtonsoft.Json.JsonProperty("rsc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rsc { get; set; }

        [Newtonsoft.Json.JsonProperty("schoolPhase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchoolPhase { get; set; }

        [Newtonsoft.Json.JsonProperty("schoolType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchoolType { get; set; }

        [Newtonsoft.Json.JsonProperty("academyProposedCapacityPrimary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AcademyProposedCapacityPrimary { get; set; }

        [Newtonsoft.Json.JsonProperty("academyProposedCapacitySecondary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AcademyProposedCapacitySecondary { get; set; }

        [Newtonsoft.Json.JsonProperty("academyProposedCapacityPost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AcademyProposedCapacityPost { get; set; }

        [Newtonsoft.Json.JsonProperty("dfeProjectLead", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DfeProjectLead { get; set; }

        [Newtonsoft.Json.JsonProperty("dfeGrade6", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DfeGrade6 { get; set; }

        [Newtonsoft.Json.JsonProperty("dfeTeamLeder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DfeTeamLeder { get; set; }

        [Newtonsoft.Json.JsonProperty("projectLeadEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectLeadEmail { get; set; }

        [Newtonsoft.Json.JsonProperty("upin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Upin { get; set; }

        [Newtonsoft.Json.JsonProperty("rpa", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Rpa { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BaselineTrackerResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaselineTrackerResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagingResponse
    {
        [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Page { get; set; }

        [Newtonsoft.Json.JsonProperty("recordCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RecordCount { get; set; }

        [Newtonsoft.Json.JsonProperty("nextPageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageUrl { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PagingResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PagingResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiResponseV2OfFssProjectResponse
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FssProjectResponse> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("paging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagingResponse Paging { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ApiResponseV2OfFssProjectResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApiResponseV2OfFssProjectResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FssProjectResponse
    {
        [Newtonsoft.Json.JsonProperty("actualOpeningDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ActualOpeningDate { get; set; }

        [Newtonsoft.Json.JsonProperty("ageRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgeRange { get; set; }

        [Newtonsoft.Json.JsonProperty("applicationWave", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationWave { get; set; }

        [Newtonsoft.Json.JsonProperty("currentFreeSchoolName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentFreeSchoolName { get; set; }

        [Newtonsoft.Json.JsonProperty("dateOfEntryIntoPreOpening", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateOfEntryIntoPreOpening { get; set; }

        [Newtonsoft.Json.JsonProperty("dateSchoolClosed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateSchoolClosed { get; set; }

        [Newtonsoft.Json.JsonProperty("residentialBoardingProvisionDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResidentialBoardingProvisionDetails { get; set; }

        [Newtonsoft.Json.JsonProperty("faithStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FaithStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("faithType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FaithType { get; set; }

        [Newtonsoft.Json.JsonProperty("otherFaithType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OtherFaithType { get; set; }

        [Newtonsoft.Json.JsonProperty("freeSchoolPenPortrait", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FreeSchoolPenPortrait { get; set; }

        [Newtonsoft.Json.JsonProperty("fsgLeadContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FsgLeadContact { get; set; }

        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gender { get; set; }

        [Newtonsoft.Json.JsonProperty("laesTab", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LaesTab { get; set; }

        [Newtonsoft.Json.JsonProperty("localAuthority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocalAuthority { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfFormsOfEntry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumberOfFormsOfEntry { get; set; }

        [Newtonsoft.Json.JsonProperty("nursery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nursery { get; set; }

        [Newtonsoft.Json.JsonProperty("postcode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Postcode { get; set; }

        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectId { get; set; }

        [Newtonsoft.Json.JsonProperty("projectStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("provisionalOpeningDateAgreedWithTrust", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ProvisionalOpeningDateAgreedWithTrust { get; set; }

        [Newtonsoft.Json.JsonProperty("residentialOrBoardingProvision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResidentialOrBoardingProvision { get; set; }

        [Newtonsoft.Json.JsonProperty("rscRegion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RscRegion { get; set; }

        [Newtonsoft.Json.JsonProperty("schoolAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchoolAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("schoolPhase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchoolPhase { get; set; }

        [Newtonsoft.Json.JsonProperty("schoolType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchoolType { get; set; }

        [Newtonsoft.Json.JsonProperty("sixthForm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SixthForm { get; set; }

        [Newtonsoft.Json.JsonProperty("sixthFormType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SixthFormType { get; set; }

        [Newtonsoft.Json.JsonProperty("specialism", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Specialism { get; set; }

        [Newtonsoft.Json.JsonProperty("trustId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrustId { get; set; }

        [Newtonsoft.Json.JsonProperty("trustName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrustName { get; set; }

        [Newtonsoft.Json.JsonProperty("urn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Urn { get; set; }

        [Newtonsoft.Json.JsonProperty("faActualCompletionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? FaActualCompletionDate { get; set; }

        [Newtonsoft.Json.JsonProperty("faForecastDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? FaForecastDate { get; set; }

        [Newtonsoft.Json.JsonProperty("kickOfMeetingHeldDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? KickOfMeetingHeldDate { get; set; }

        [Newtonsoft.Json.JsonProperty("realisticYearofOpening", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RealisticYearofOpening { get; set; }

        [Newtonsoft.Json.JsonProperty("memberOfParliament", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MemberOfParliament { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfPupil", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumberOfPupil { get; set; }

        [Newtonsoft.Json.JsonProperty("geographicalRegion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GeographicalRegion { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FssProjectResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FssProjectResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiResponseV2OfTrustSummaryResponse
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<TrustSummaryResponse> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("paging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagingResponse Paging { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ApiResponseV2OfTrustSummaryResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApiResponseV2OfTrustSummaryResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiSingleResponseV2OfTrustResponse
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TrustResponse Data { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ApiSingleResponseV2OfTrustResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApiSingleResponseV2OfTrustResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiResponseV2OfTrustResponse
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<TrustResponse> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("paging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagingResponse Paging { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ApiResponseV2OfTrustResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApiResponseV2OfTrustResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiSingleResponseV2OfMasterTrustResponse
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MasterTrustResponse Data { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ApiSingleResponseV2OfMasterTrustResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApiSingleResponseV2OfMasterTrustResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MasterTrustResponse
    {
        [Newtonsoft.Json.JsonProperty("trustData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MasterTrustDataResponse TrustData { get; set; }

        [Newtonsoft.Json.JsonProperty("giasData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GIASDataResponse GiasData { get; set; }

        [Newtonsoft.Json.JsonProperty("establishments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<EstablishmentResponse> Establishments { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MasterTrustResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MasterTrustResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MasterTrustDataResponse
    {
        [Newtonsoft.Json.JsonProperty("trustContactPhoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrustContactPhoneNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("performanceAndRiskDateOfMeeting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PerformanceAndRiskDateOfMeeting { get; set; }

        [Newtonsoft.Json.JsonProperty("prioritisedAreaOfReview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrioritisedAreaOfReview { get; set; }

        [Newtonsoft.Json.JsonProperty("currentSingleListGrouping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentSingleListGrouping { get; set; }

        [Newtonsoft.Json.JsonProperty("dateOfGroupingDecision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateOfGroupingDecision { get; set; }

        [Newtonsoft.Json.JsonProperty("dateEnteredOntoSingleList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateEnteredOntoSingleList { get; set; }

        [Newtonsoft.Json.JsonProperty("trustReviewWriteup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrustReviewWriteup { get; set; }

        [Newtonsoft.Json.JsonProperty("dateOfTrustReviewMeeting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateOfTrustReviewMeeting { get; set; }

        [Newtonsoft.Json.JsonProperty("followupLetterSent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FollowupLetterSent { get; set; }

        [Newtonsoft.Json.JsonProperty("dateActionPlannedFor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateActionPlannedFor { get; set; }

        [Newtonsoft.Json.JsonProperty("wipSummaryGoesToMinister", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WipSummaryGoesToMinister { get; set; }

        [Newtonsoft.Json.JsonProperty("externalGovernanceReviewDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalGovernanceReviewDate { get; set; }

        [Newtonsoft.Json.JsonProperty("efficiencyICFPreviewCompleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EfficiencyICFPreviewCompleted { get; set; }

        [Newtonsoft.Json.JsonProperty("efficiencyICFPreviewOther", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EfficiencyICFPreviewOther { get; set; }

        [Newtonsoft.Json.JsonProperty("linkToWorkplaceForEfficiencyICFReview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LinkToWorkplaceForEfficiencyICFReview { get; set; }

        [Newtonsoft.Json.JsonProperty("numberInTrust", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumberInTrust { get; set; }

        [Newtonsoft.Json.JsonProperty("trustType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrustType { get; set; }

        [Newtonsoft.Json.JsonProperty("trustAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressResponse TrustAddress { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MasterTrustDataResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MasterTrustDataResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EstablishmentDto
    {
        [Newtonsoft.Json.JsonProperty("ukprn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ukprn { get; set; }

        [Newtonsoft.Json.JsonProperty("urn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Urn { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("localAuthorityCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocalAuthorityCode { get; set; }

        [Newtonsoft.Json.JsonProperty("localAuthorityName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocalAuthorityName { get; set; }

        [Newtonsoft.Json.JsonProperty("ofstedRating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfstedRating { get; set; }

        [Newtonsoft.Json.JsonProperty("ofstedLastInspection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfstedLastInspection { get; set; }

        [Newtonsoft.Json.JsonProperty("statutoryLowAge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatutoryLowAge { get; set; }

        [Newtonsoft.Json.JsonProperty("statutoryHighAge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatutoryHighAge { get; set; }

        [Newtonsoft.Json.JsonProperty("schoolCapacity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchoolCapacity { get; set; }

        [Newtonsoft.Json.JsonProperty("pfi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pfi { get; set; }

        [Newtonsoft.Json.JsonProperty("establishmentNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EstablishmentNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("pan", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pan { get; set; }

        [Newtonsoft.Json.JsonProperty("deficit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deficit { get; set; }

        [Newtonsoft.Json.JsonProperty("viabilityIssue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ViabilityIssue { get; set; }

        [Newtonsoft.Json.JsonProperty("giasLastChangedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GiasLastChangedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("noOfBoys", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoOfBoys { get; set; }

        [Newtonsoft.Json.JsonProperty("noOfGirls", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoOfGirls { get; set; }

        [Newtonsoft.Json.JsonProperty("senUnitCapacity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SenUnitCapacity { get; set; }

        [Newtonsoft.Json.JsonProperty("senUnitOnRoll", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SenUnitOnRoll { get; set; }

        [Newtonsoft.Json.JsonProperty("religousEthos", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReligousEthos { get; set; }

        [Newtonsoft.Json.JsonProperty("headteacherTitle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HeadteacherTitle { get; set; }

        [Newtonsoft.Json.JsonProperty("headteacherFirstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HeadteacherFirstName { get; set; }

        [Newtonsoft.Json.JsonProperty("headteacherLastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HeadteacherLastName { get; set; }

        [Newtonsoft.Json.JsonProperty("headteacherPreferredJobTitle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HeadteacherPreferredJobTitle { get; set; }

        [Newtonsoft.Json.JsonProperty("diocese", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeDto Diocese { get; set; }

        [Newtonsoft.Json.JsonProperty("establishmentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeDto EstablishmentType { get; set; }

        [Newtonsoft.Json.JsonProperty("gor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeDto Gor { get; set; }

        [Newtonsoft.Json.JsonProperty("phaseOfEducation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeDto PhaseOfEducation { get; set; }

        [Newtonsoft.Json.JsonProperty("religiousCharacter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeDto ReligiousCharacter { get; set; }

        [Newtonsoft.Json.JsonProperty("parliamentaryConstituency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeDto ParliamentaryConstituency { get; set; }

        [Newtonsoft.Json.JsonProperty("census", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CensusDto Census { get; set; }

        [Newtonsoft.Json.JsonProperty("misEstablishment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MisEstablishmentDto MisEstablishment { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressDto Address { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EstablishmentDto FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EstablishmentDto>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NameAndCodeDto
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NameAndCodeDto FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NameAndCodeDto>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CensusDto
    {
        [Newtonsoft.Json.JsonProperty("numberOfPupils", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumberOfPupils { get; set; }

        [Newtonsoft.Json.JsonProperty("percentageFsm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PercentageFsm { get; set; }

        [Newtonsoft.Json.JsonProperty("percentageFsmLastSixYears", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PercentageFsmLastSixYears { get; set; }

        [Newtonsoft.Json.JsonProperty("percentageEnglishAsSecondLanguage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PercentageEnglishAsSecondLanguage { get; set; }

        [Newtonsoft.Json.JsonProperty("percentageSen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PercentageSen { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CensusDto FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CensusDto>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MisEstablishmentDto
    {
        [Newtonsoft.Json.JsonProperty("dateOfLatestSection8Inspection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateOfLatestSection8Inspection { get; set; }

        [Newtonsoft.Json.JsonProperty("inspectionEndDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InspectionEndDate { get; set; }

        [Newtonsoft.Json.JsonProperty("overallEffectiveness", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OverallEffectiveness { get; set; }

        [Newtonsoft.Json.JsonProperty("qualityOfEducation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QualityOfEducation { get; set; }

        [Newtonsoft.Json.JsonProperty("behaviourAndAttitudes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BehaviourAndAttitudes { get; set; }

        [Newtonsoft.Json.JsonProperty("personalDevelopment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonalDevelopment { get; set; }

        [Newtonsoft.Json.JsonProperty("effectivenessOfLeadershipAndManagement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EffectivenessOfLeadershipAndManagement { get; set; }

        [Newtonsoft.Json.JsonProperty("earlyYearsProvision", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EarlyYearsProvision { get; set; }

        [Newtonsoft.Json.JsonProperty("sixthFormProvision", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SixthFormProvision { get; set; }

        [Newtonsoft.Json.JsonProperty("weblink", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Weblink { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MisEstablishmentDto FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MisEstablishmentDto>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressDto
    {
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street { get; set; }

        [Newtonsoft.Json.JsonProperty("town", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Town { get; set; }

        [Newtonsoft.Json.JsonProperty("county", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string County { get; set; }

        [Newtonsoft.Json.JsonProperty("postcode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Postcode { get; set; }

        [Newtonsoft.Json.JsonProperty("locality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locality { get; set; }

        [Newtonsoft.Json.JsonProperty("additional", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Additional { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AddressDto FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AddressDto>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrustDto
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("ukprn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ukprn { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameAndCodeDto Type { get; set; }

        [Newtonsoft.Json.JsonProperty("companiesHouseNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompaniesHouseNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressDto Address { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TrustDto FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrustDto>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedDataResponseOfTrustDto
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<TrustDto> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("paging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagingResponse2 Paging { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PagedDataResponseOfTrustDto FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PagedDataResponseOfTrustDto>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagingResponse2
    {
        [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Page { get; set; }

        [Newtonsoft.Json.JsonProperty("recordCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RecordCount { get; set; }

        [Newtonsoft.Json.JsonProperty("nextPageUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageUrl { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PagingResponse2 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PagingResponse2>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TrustStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Open")]
        Open = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 1,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AcademiesApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public AcademiesApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AcademiesApiException<TResult> : AcademiesApiException
    {
        public TResult Result { get; private set; }

        public AcademiesApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625