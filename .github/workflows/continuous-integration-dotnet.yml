name: .NET Build and Test

on:
  push:
    branches:
    - main
    paths:
    - 'Dfe.Academies.*/**'
    - 'TramsDataApi*/**'
    - 'PersonsApi*/**'
    - '!Dfe.Academies.Performance/**'
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]
    paths:
    - 'Dfe.Academies.*/**'
    - 'TramsDataApi*/**'
    - 'PersonsApi*/**'
    - '!Dfe.Academies.Performance/**'

env:
  DOTNET_VERSION: '8.0.x'
  EF_VERSION: '6.0.5'
  JAVA_VERSION: '17'
  CONNECTION_STRING: 'Server=localhost,1433;Database=sip;TrustServerCertificate=True;User Id=sa;Password=StrongPassword905'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0 # Shallow clones disabled for a better relevancy of SC analysis

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup services
      run: |
        cp .env.database.example .env.database
        cp .env.example .env.development
        docker compose -f "docker-compose.yml" up -d --build db

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'microsoft'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Install SonarCloud scanners
      run: dotnet tool install --global dotnet-sonarscanner

    - name: Install EF for tests
      run: dotnet tool install --global dotnet-ef --version ${{ env.EF_VERSION }}

    - name: Install dotnet reportgenerator
      run: dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: Add nuget package source
      run: dotnet nuget add source --username USERNAME --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/DFE-Digital/index.json"

    - name: Restore tools for tests
      run: dotnet tool restore

    - name: Restore dependencies
      run: dotnet restore

    - name: Build, Test and Analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        ConnectionStrings__DefaultConnection: ${{ env.CONNECTION_STRING }}
        CI: true
      run: |
        dotnet-sonarscanner begin /k:"DFE-Digital_academies-api" /o:"dfe-digital" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.coverageReportPaths=CoverageReport/SonarQube.xml
        dotnet build --no-restore -p:CI=${CI}
        dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage"
        reportgenerator -reports:./**/coverage.cobertura.xml -targetdir:./CoverageReport -reporttypes:SonarQube
        dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

    - uses: dorny/paths-filter@v3
      id: person-api-changes
      with:
        filters: |
          client:
            - 'Dfe.PersonsApi.Client/**'

    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Extract the branch name
      id: extract_branch
      run: echo "branch_name=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

    - name: Extract version from .csproj
      working-directory: Dfe.PersonsApi.Client  
      id: extract_version
      run: |
        VERSION=$(grep '<Version>' *.csproj | sed -E 's/.*<Version>([0-9]+\.[0-9]+\.[0-9]+)<\/Version>/\1/')
        echo "Current version: $VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Increment version
      id: increment_version
      run: |
        VERSION=${{ env.VERSION }}
        IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
        PATCH_VERSION=${VERSION_PARTS[2]}
        NEW_PATCH_VERSION=$((PATCH_VERSION + 1))
        NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$NEW_PATCH_VERSION"
        echo "New version: $NEW_VERSION"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

    - name: Update .csproj with new version
      working-directory: Dfe.PersonsApi.Client 
      run: |
        NEW_VERSION=${{ env.NEW_VERSION }}
        sed -i "s/<Version>[0-9]\+\.[0-9]\+\.[0-9]\+<\/Version>/<Version>$NEW_VERSION<\/Version>/" *.csproj

    - name: Commit updated .csproj
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git checkout -B ${{ env.branch_name }}
        git add *.csproj
        git commit -m "Increment version to ${{ env.NEW_VERSION }}" || echo "No changes to commit"
        git push origin ${{ env.branch_name }}

    - name: Build, pack and publish
      working-directory: Dfe.PersonsApi.Client
      run: |
        dotnet build -c Release
        dotnet pack -c Release -p:PackageVersion=${{ env.NEW_VERSION }} --output .
        dotnet nuget push "*.nupkg" --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/DFE-Digital/index.json
      if: steps.person-api-changes.outputs.client == 'true'

    - name: Stop containers
      if: always()
      run: docker compose -f "docker-compose.yml" down
