name: .NET Build and Test

on:
  push:
    branches:
    - main
    paths:
    - 'Dfe.Academies.*/**'
    - 'TramsDataApi*/**'
    - 'PersonsApi*/**'
    - '!Dfe.Academies.Performance/**'
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]
    paths:
    - 'Dfe.Academies.*/**'
    - 'TramsDataApi*/**'
    - 'PersonsApi*/**'
    - '!Dfe.Academies.Performance/**'

env:
  DOTNET_VERSION: '8.0.x'
  EF_VERSION: '6.0.5'
  JAVA_VERSION: '17'
  CONNECTION_STRING: 'Server=localhost,1433;Database=sip;TrustServerCertificate=True;User Id=sa;Password=StrongPassword905'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0 # Shallow clones disabled for a better relevancy of SC analysis

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup services
      run: |
        cp .env.database.example .env.database
        cp .env.example .env.development
        docker compose -f "docker-compose.yml" up -d --build db

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'microsoft'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Install SonarCloud scanners
      run: dotnet tool install --global dotnet-sonarscanner

    - name: Install EF for tests
      run: dotnet tool install --global dotnet-ef --version ${{ env.EF_VERSION }}

    - name: Install dotnet reportgenerator
      run: dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: Add nuget package source
      run: dotnet nuget add source --username USERNAME --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/DFE-Digital/index.json"

    - name: Restore tools for tests
      run: dotnet tool restore

    - name: Restore dependencies
      run: dotnet restore

    - name: Build, Test and Analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        ConnectionStrings__DefaultConnection: ${{ env.CONNECTION_STRING }}
        CI: true
      run: |
        dotnet-sonarscanner begin /k:"DFE-Digital_academies-api" /o:"dfe-digital" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.coverageReportPaths=CoverageReport/SonarQube.xml
        dotnet build --no-restore -p:CI=${CI}
        dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage"
        reportgenerator -reports:./**/coverage.cobertura.xml -targetdir:./CoverageReport -reporttypes:SonarQube
        dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

    - uses: dorny/paths-filter@v3
      id: person-api-changes
      with:
        filters: |
          client:
            - 'Dfe.PersonsApi.Client/**'

    - name: Set up curl and jq
      run: sudo apt-get install -y curl jq

    - name: Check for custom version in commit message or check the feed for the latest version and increment it
      id: check_custom_version
      run: |
        # Search the last 10 commits for the version update indicator 
        COMMIT_HASH=$(git log -n 10 --pretty=format:"%H %s" | grep -P '\(#update package version to \d+\.\d+\.\d+\)' | grep -oP '^\w+' | head -n 1)

        if [[ -n "$COMMIT_HASH" ]]; then
          echo "Found commit with version update indicator: $COMMIT_HASH"
      
          # Check if the commit is already tagged
          if git rev-parse "processed-nuget-version-${COMMIT_HASH}" >/dev/null 2>&1; then
            echo "This commit has already been processed for version update. Skipping."
          else
            # Extract the version from the commit message
            CUSTOM_VERSION=$(git show -s --format=%s $COMMIT_HASH | grep -oP '\(#update package version to \K([0-9]+\.[0-9]+\.[0-9]+)')

            if [[ -n "$CUSTOM_VERSION" ]]; then
              echo "Using custom version: $CUSTOM_VERSION"
              echo "NEW_VERSION=$CUSTOM_VERSION" >> $GITHUB_ENV

              # Tag the commit to prevent reprocessing
              git tag "processed-nuget-version-${COMMIT_HASH}"
              git push origin "processed-nuget-version-${COMMIT_HASH}"
            else
              echo "Failed to extract version from commit message. Exiting."
              exit 1
            fi
          fi
        fi

        if [[ -z "$CUSTOM_VERSION" ]]; then
          echo "No unprocessed custom version found in the last 10 commits. Proceeding to fetch and increment the latest version from the feed."
      
          # Fetch the latest version and increment the version
          PACKAGE_ID="Dfe.PersonsApi.Client"
          FEED_URL="https://nuget.pkg.github.com/DFE-Digital/query?q=$PACKAGE_ID"
          LATEST_VERSION=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$FEED_URL" | jq -r '.data[0].version')

          if [[ -z "$LATEST_VERSION" ]]; then
            echo "No existing version found in the feed. Defaulting to version 1.0.0"
            NEW_VERSION="1.0.0"
          else
            echo "Latest version is $LATEST_VERSION"
            IFS='.' read -r -a VERSION_PARTS <<< "$LATEST_VERSION"
            NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$((VERSION_PARTS[2] + 1))"
            echo "Incrementing to new version: $NEW_VERSION"
          fi

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        fi
      shell: /usr/bin/bash -e {0}

    - name: Build, pack and publish
      working-directory: Dfe.PersonsApi.Client
      run: |
        dotnet build -c Release
        dotnet pack -c Release -p:PackageVersion=${{ env.NEW_VERSION }} --output .
        dotnet nuget push "*.nupkg" --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/DFE-Digital/index.json
      if: steps.person-api-changes.outputs.client == 'true' && github.event_name != 'pull_request'

    - name: Stop containers
      if: always()
      run: docker compose -f "docker-compose.yml" down
